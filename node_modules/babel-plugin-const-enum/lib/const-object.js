"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@babel/core");

var _generator = _interopRequireDefault(require("@babel/generator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  TSEnumDeclaration(path) {
    if (path.node.const) {
      // `path === constObjectPath` for `replaceWith`.
      const [constObjectPath] = path.replaceWith(_core.types.variableDeclaration('const', [_core.types.variableDeclarator(_core.types.identifier(path.node.id.name), _core.types.objectExpression(TSEnumMembersToObjectProperties(path.get('members'))))]));
      path.scope.registerDeclaration(constObjectPath);
    }
  }

};
exports.default = _default;

const TSEnumMembersToObjectProperties = memberPaths => {
  const isStringEnum = memberPaths.some(memberPath => _core.types.isStringLiteral(memberPath.node.initializer));
  const constEnum = {};
  let currentValue = 0;
  return memberPaths.map(tsEnumMemberPath => {
    const keyNode = computeKeyNodeFromIdPath(tsEnumMemberPath.get('id'));
    const key = getKeyFromKeyNode(keyNode);
    const valueNode = computeValueNodeFromEnumMemberPath(tsEnumMemberPath, isStringEnum, constEnum, currentValue);
    const value = getValueFromValueNode(valueNode);
    constEnum[key] = value;

    if (_core.types.isNumericLiteral(valueNode)) {
      currentValue = value + 1;
    } else if (_core.types.isStringLiteral(valueNode)) {
      currentValue = null;
    }

    return _core.types.objectProperty(keyNode, valueNode);
  });
};

const computeKeyNodeFromIdPath = idPath => {
  const id = idPath.node;
  let keyNode;

  if (_core.types.isIdentifier(id)) {
    const key = id.name;
    keyNode = _core.types.identifier(key);
  } else if (_core.types.isStringLiteral(id)) {
    const key = id.value;
    keyNode = _core.types.stringLiteral(key);
  } else if (_core.types.isNumericLiteral(id)) {
    throw idPath.buildCodeFrameError('An enum member cannot have a numeric name.');
  } else {
    throw idPath.buildCodeFrameError('Enum member expected.');
  }

  return keyNode;
};

const getKeyFromKeyNode = keyNode => {
  let key;

  if (_core.types.isIdentifier(keyNode)) {
    key = keyNode.name;
  } else if (_core.types.isStringLiteral(keyNode)) {
    key = keyNode.value;
  }

  return key;
};

const computeValueNodeFromEnumMemberPath = (tsEnumMemberPath, isStringEnum, constEnum, currentValue) => {
  const initializerPath = tsEnumMemberPath.get('initializer');
  const initializer = initializerPath.node;
  let value;

  if (initializer) {
    if (_core.types.isNumericLiteral(initializer) || _core.types.isStringLiteral(initializer)) {
      value = initializer.value;
    } else if (_core.types.isIdentifier(initializer)) {
      value = constEnum[initializer.name];
      validateConstEnumMemberAccess(tsEnumMemberPath, value);
    } else if (isNumericUnaryExpression(initializer) || isNumericBinaryExpression(initializer)) {
      if (isStringEnum) {
        throw initializerPath.buildCodeFrameError('Computed values are not permitted in an enum with string valued members.');
      }

      initializerPath.traverse(accessConstEnumMemberVisitor, {
        constEnum
      });
      value = eval((0, _generator.default)(initializer).code);
    } else {
      throw initializerPath.buildCodeFrameError('const enum member initializers can only contain literal values and other computed enum values.');
    }
  } else {
    if (currentValue === null) {
      throw tsEnumMemberPath.buildCodeFrameError('Enum member must have initializer.');
    }

    value = currentValue;
  }

  let valueNode;

  if (Number.isFinite(value)) {
    valueNode = _core.types.numericLiteral(value);
  } else if (typeof value === 'string') {
    valueNode = _core.types.stringLiteral(value);
  } else {
    // Should not get here.
    throw new Error('`value` is not a number or string');
  }

  return valueNode;
};

const getValueFromValueNode = valueNode => {
  let value;

  if (_core.types.isNumericLiteral(valueNode) || _core.types.isStringLiteral(valueNode)) {
    value = valueNode.value;
  }

  return value;
};

const UNARY_OPERATORS = new Set(['+', '-', '~']);
const BINARY_OPERATORS = new Set(['+', '-', '/', '%', '*', '**', '&', '|', '>>', '>>>', '<<', '^']);

const isNumericUnaryExpression = node => _core.types.isUnaryExpression(node) && UNARY_OPERATORS.has(node.operator);

const isNumericBinaryExpression = node => _core.types.isBinaryExpression(node) && BINARY_OPERATORS.has(node.operator);

const validateConstEnumMemberAccess = (path, value) => {
  if (value === undefined) {
    throw path.buildCodeFrameError('Enum initializer identifier must reference a previously defined enum member.');
  }
};

const accessConstEnumMemberVisitor = {
  enter(path) {
    if (_core.types.isIdentifier(path.node)) {
      const constEnum = this.constEnum;
      const value = constEnum[path.node.name];
      validateConstEnumMemberAccess(path, value);
      path.replaceWith(_core.types.numericLiteral(value));
      path.skip();
    } else if (!(_core.types.isNumericLiteral(path.node) || isNumericUnaryExpression(path.node) || isNumericBinaryExpression(path.node))) {
      throw path.buildCodeFrameError('Must be numeric expression.');
    }
  }

};